import Foundation

import Foundation

// TODO: Generated by Copilot, verify
struct MTGenerator: RandomNumberGenerator {
    private static let n = 624
    private static let m = 397
    private static let matrixA: UInt32 = 0x9908b0df
    private static let upperMask: UInt32 = 0x80000000
    private static let lowerMask: UInt32 = 0x7fffffff

    private var mt = [UInt32](repeating: 0, count: n)
    private var index = MTGenerator.n + 1

    init(seed: UInt32) {
        mt[0] = seed
        for i in 1..<MTGenerator.n {
            mt[i] = 1812433253 &* (mt[i - 1] ^ (mt[i - 1] >> 30)) &+ UInt32(i)
        }
    }

    mutating func next() -> UInt64 {
        let value = nextUInt32()
        return (UInt64(value) << 32) | UInt64(nextUInt32())
    }

    private mutating func nextUInt32() -> UInt32 {
        if index >= MTGenerator.n {
            if index > MTGenerator.n {
                mt[0] = 5489 // Default seed
                for i in 1..<MTGenerator.n {
                    mt[i] = 1812433253 &* (mt[i - 1] ^ (mt[i - 1] >> 30)) &+ UInt32(i)
                }
            }
            twist()
        }

        var y = mt[index]
        y ^= y >> 11
        y ^= (y << 7) & 0x9d2c5680
        y ^= (y << 15) & 0xefc60000
        y ^= y >> 18

        index += 1
        return y
    }

    private mutating func twist() {
        for i in 0..<MTGenerator.n {
            let y = (mt[i] & MTGenerator.upperMask) | (mt[(i + 1) % MTGenerator.n] & MTGenerator.lowerMask)
            mt[i] = mt[(i + MTGenerator.m) % MTGenerator.n] ^ (y >> 1)
            if y % 2 != 0 {
                mt[i] ^= MTGenerator.matrixA
            }
        }
        index = 0
    }
}